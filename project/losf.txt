Lustre中小文件存在的问题：
（1）元数据和文件本身的数据分开存储，用户在读小文件之前需要先同MDS交互，以获得目标小文件的位置。和传统的本地文件系统相比，这一过程相当于增加了一次额外的网络传输开销和元数据服务器的访问开销。对小文件来说，这两项额外开销都是相当大的。
（2）Cache设计对小文件I/O性能的作用不明显。客户端Cache只对本机有效，不同客户端访问OSD的同一部分文件数据时，每个用户都需要先把数据从OSD复制到本地Cache中。如果要访问的文件内容只占页内很少一部分，也要先把整个物理页从OSD端的磁盘读入操作系统的文件缓存中再访问。
（3）OSD后端磁盘文件系统的小文件读写性能不好，读写小文件时，磁盘寻址带来的延时对一次小文件I/O操作的总时间来说，占很大比例。

服务器驱动的元数据预取和命名空间平坦化：
修改对象的元数据，在对象元数据中增加反映对象之间关系的字段。每次访问MDS进行元数据操作时，预取和本次访问的对象相关的其它对象的元数据，以减少访问MDS的次数。

idea 1: 大文件和小文件分开存储

针对Lustre的I/O特点，要改善其小文件性能，有两条途径：
（1）改善Lustre的I/O流程，减少小文件I/O操作时的网络开销。
（2）改善Lustre后端存储设备的性能，降低小文件I/O操作时访问存储设备的延时。

question 1: 如何判断小文件I/O？

question 2: OSD端做了缓存吗？

question 3: 对象条块化所基于的大小？
