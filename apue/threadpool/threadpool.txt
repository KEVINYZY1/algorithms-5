关于线程池的一点想法
“池”化技术都是比较类似的，都是应对“小”的特点而开发出来的，比如：
内存池是针对小块内存的申请和释放过于频繁导致的效率低下问题。先分配一定量的内存，按照大小分类，当程序需要小块内存（这里的小是相对而言的，看实现方式）时，就从某个大块内存中截取小块内存，用完了之后，就再放入大块内存中。当然，这里说的只是基本的思想，在实现的时候，有针对不同的分配方式的优化方案。
线程池是针对大量短任务申请线程和释放线程过于频繁导致的效率低下问题，如果任务运行时间较短，而申请线程和释放线程的时间较长，那么频繁地进行线程的申请和释放必将降低效率。先分配一定数量的线程，如果有任务到达，就从线程池中取出一个线程处理任务，处理完成后，将线程归还给线程池。于是，就避免了过于频繁线程的申请和释放导致的效率低下问题。而且，还可以根据当前线程的负载进行线程的增加和减少，当现有的线程比较忙碌时，可以增加线程，但是，线程也不能无限增加，因为过多的线程会增大系统开销，当现有的线程多数处于空闲时，可以减少线程。
当然，还有其它的池化技术，不过，原理大体都是类似的。

线程池的实现：
任务队列：保存需要交给线程来执行的任务。
执行线程队列：正在执行任务的线程。
空闲线程栈：存放空闲的线程。
工作流程：
创建线程池。每个线程都等待工作到达的信号。并将所有线程放入到空闲线程栈中。
客户生成任务，将任务放到任务队列。
空闲线程栈中的线程收到信号（有任务来了），获取任务，处理任务。再查看是否有任务，如果有则再次获取任务并处理，如果没有，就将线程放入到空闲线程栈中。
